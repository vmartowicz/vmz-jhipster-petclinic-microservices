package fr.vmz.jhipster.petclinic.customer.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OwnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOwnerAllPropertiesEquals(Owner expected, Owner actual) {
        assertOwnerAutoGeneratedPropertiesEquals(expected, actual);
        assertOwnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOwnerAllUpdatablePropertiesEquals(Owner expected, Owner actual) {
        assertOwnerUpdatableFieldsEquals(expected, actual);
        assertOwnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOwnerAutoGeneratedPropertiesEquals(Owner expected, Owner actual) {
        assertThat(actual)
            .as("Verify Owner auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOwnerUpdatableFieldsEquals(Owner expected, Owner actual) {
        assertThat(actual)
            .as("Verify Owner relevant properties")
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getTelephone()).as("check telephone").isEqualTo(expected.getTelephone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOwnerUpdatableRelationshipsEquals(Owner expected, Owner actual) {
        // empty method
    }
}
